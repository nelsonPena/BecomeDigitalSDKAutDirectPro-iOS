// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BDIdentityVerification
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CaptureCore
import CaptureUX
import CoreData
import DeveloperToolsSupport
import Foundation
import Identy
import ImageIO
import MapKit
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func loadGif(name: Swift.String, bundle: Foundation.Bundle)
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String, bundle: Foundation.Bundle) -> UIKit.UIImage?
}
@objc public protocol BDIVDelegate : Swift.Sendable {
  @objc func BDIVResponseSuccess(bdivResult: Swift.AnyObject)
  @objc func BDIVResponseError(error: Swift.String)
}
@_hasMissingDesignatedInitializers final public class Logger {
  public static let shared: BDIdentityVerification.Logger
  final public func configureLogging(isEnabled: Swift.Bool)
  final public func log(_ message: Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
}
extension BDIdentityVerification.Countries {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BDIdentityVerification.Countries>
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var country_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var co_3: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var co_2: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var airport_code: Swift.String? {
    @objc get
    @objc set
  }
}
public struct BDIdentityVerificationReponse {
  public init()
  public enum StatusType : Swift.String {
    case SUCCES
    case ERROR
    case PENDING
    case NOFOUND
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var message: Swift.String
  public var responseDictionary: [Swift.String : Any]?
  public var responseStatus: BDIdentityVerification.BDIdentityVerificationReponse.StatusType
  public func toJson() -> Swift.String?
}
public struct BDIVConfig {
  public init(clienId: Swift.String, clientSecret: Swift.String, contractId: Swift.String, documenTypes: [BDIdentityVerification.DocumentType], userId: Swift.String, customerLogo: Swift.String = "", customLocalizationFileName: Swift.String? = "MBLocalizable")
  public let clienId: Swift.String
  public var customerLogo: Swift.String?
  public let clientSecret: Swift.String
  public let contractId: Swift.String
  public let documenTypes: [BDIdentityVerification.DocumentType]
  public let userId: Swift.String
  public let customLocalizationFileName: Swift.String?
}
@_hasMissingDesignatedInitializers public class CountriesView {
  public static func getCountriess() -> [BDIdentityVerification.Countries]
  public static func getCountriesByCo3(co3: Swift.String) -> [BDIdentityVerification.Countries]
  public static func getCountriesByCo2(co2: Swift.String) -> [BDIdentityVerification.Countries]
  public static func getCountriesByType(type: Swift.Int16) -> [BDIdentityVerification.Countries]
  public static func entityCountriesIsEmpty() -> Swift.Bool
  public static func deleteEntity(countries: BDIdentityVerification.Countries)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Countries) public class Countries : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum DocumentType : Swift.String {
  case DNI
  case PASSPORT
  case DRIVERLICENSE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class BecomeDigitalSDK {
  public init(bdivConfig: BDIdentityVerification.BDIVConfig, delegate: any BDIdentityVerification.BDIVDelegate)
  public func startVerification()
  @objc deinit
}
extension CoreData.NSPersistentStoreCoordinator {
  public enum CoordinatorError : Swift.Error {
    case modelFileNotFound
    case modelCreationError
    case storePathNotFound
    public static func == (a: CoreData.NSPersistentStoreCoordinator.CoordinatorError, b: CoreData.NSPersistentStoreCoordinator.CoordinatorError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class Permissions : UIKit.UIResponder, UIKit.UIApplicationDelegate, UserNotifications.UNUserNotificationCenterDelegate, CoreLocation.CLLocationManagerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MainViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension BDIdentityVerification.BDIdentityVerificationReponse.StatusType : Swift.Equatable {}
extension BDIdentityVerification.BDIdentityVerificationReponse.StatusType : Swift.Hashable {}
extension BDIdentityVerification.BDIdentityVerificationReponse.StatusType : Swift.RawRepresentable {}
extension BDIdentityVerification.DocumentType : Swift.Equatable {}
extension BDIdentityVerification.DocumentType : Swift.Hashable {}
extension BDIdentityVerification.DocumentType : Swift.RawRepresentable {}
extension CoreData.NSPersistentStoreCoordinator.CoordinatorError : Swift.Equatable {}
extension CoreData.NSPersistentStoreCoordinator.CoordinatorError : Swift.Hashable {}
